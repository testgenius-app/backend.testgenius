generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid()) @map("user_id")
  firstName      String   @map("first_name")
  lastName       String?  @map("last_name")
  email          String   @unique
  password       String?
  logo           String?
  coins          Int
  lastActiveDate DateTime @default(now()) @map("last_active_date")
  role           Role     @default(USER) @map("user_role")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  isVerified     Boolean  @default(false) @map("is_verified")
  provider       Providers @default(EMAIL)
  tests          Test[]
  actorActivities Activity[] @relation("ActorActivities")
  targetActivities Activity[] @relation("TargetActivities")
  @@map("users")
}

enum Role {
  USER
  ADMIN
  INVESTOR
}

enum Providers {
  GOOGLE
  EMAIL
  FACEBOOK
}

model VerificationCode {
  id        String   @id @default(uuid()) @map("verification_code_id")
  code      String   @map("code") @unique
  token     String   @unique
  firstName String   @map("first_name")
  lastName  String?  @map("last_name")
  email     String   @unique
  password  String   @map("hashed_password")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  @@map("verification_codes")
}

model Pack {
  id              String   @id @default(uuid()) @map("pack_id")
  name            String
  coinsCount      Int      @default(1) @map("coinsCount")
  discountPerCent Int?     @map("discount_per_cent")
  bonusCount      Int?     @default(0)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  advantages      String[]
  disadvantages   String[]
  isDaily         Boolean  @default(false) @map("is_daily")
  isFree          Boolean  @default(false) @map("is_free")

  @@map("packs")
}

model Test {
  id            String    @id @default(uuid()) @map("test_id")
  title         String
  subject       String
  gradeLevel    String    @map("grade_level")
  description   String
  tags          String[]
  sectionCount  Int       @map("section_count")
  isPublic      Boolean   @default(false) @map("is_public") 
  sections      Section[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String    @map("owner_id")
  onlineTests    OnlineTest[]

  testTempCode  TestTempCode?

  @@map("tests")
}

model Section {
  id            String    @id @default(uuid()) @map("section_id")
  title         String
  instruction   String
  type          String

  contextText   String?    @map("context_text")
  contextImage  String?    @map("context_image")
  contextAudio  String?    @map("context_audio")
  contextVideo  String?    @map("context_video")

  test          Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId        String

  tasks         Task[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("sections")
}

model Task {
  id            String    @id @default(uuid()) @map("task_id")
  title         String
  type          String

  section       Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId     String    @map("section_id")

  questions     Question[]

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("tasks")
}

model Question {
  id                     String    @id @default(uuid()) @map("question_id")
  questionText           String    @map("question_text")
  options                String[]
  answers                String[]
  acceptableAnswers      String[]
  answerKeywords         String[]
  expectedResponseFormat String    @map("expected_response_format")
  score                  Int?
  explanation            String

  imageUrl               String?   @map("image_url")
  audioUrl               String?   @map("audio_url")
  labelLocationX         Float?    @map("label_location_x")
  labelLocationY         Float?    @map("label_location_y")

  task                   Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId                 String    @map("task_id")

  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  @@map("questions")
}

model TestTempCode {
  id         String    @id @default(uuid()) @map("test_temp_code_id")
  code       Int       @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime  @updatedAt @map("expires_at")

  test       Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     String    @unique @map("test_id")
  onlineTest OnlineTest?
  @@map("test_temp_codes")
}

model OnlineTest {
  id         String    @id @default(uuid()) @map("online_test_id")
  testId     String    @unique @map("test_id")
  test       Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  tempCodeId String?   @unique @map("temp_code_id")
  durationInMinutes Int @default(30) @map("duration_in_minutes")
  startedAt DateTime? @map("started_at")
  finishedAt DateTime? @map("finished_at")
  testTempCode TestTempCode? @relation(fields: [tempCodeId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  participants Json? 
  results Json? 
  @@map("online_tests")
}

enum EntityType {
  TEST
  ONLINE_TEST
  SECTION
  TASK
  QUESTION
  USER
}

enum ActionType {
  CREATE
  UPDATE
  DELETE
  START
  COMPLETE
  SHARE
  JOIN
  LEAVE
}

model Activity {
  id          String      @id @default(uuid())
  entityType  EntityType
  actionType  ActionType
  entityId    String
  description Json        // Changed from String to Json to store translations
  actorId     String
  actor       User        @relation("ActorActivities", fields: [actorId], references: [id], onDelete: Cascade)
  targetId    String?
  target      User?       @relation("TargetActivities", fields: [targetId], references: [id], onDelete: Cascade)
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([entityType, entityId])
  @@index([actorId])
  @@index([targetId])
}
